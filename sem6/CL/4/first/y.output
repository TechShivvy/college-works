Nonterminals useless in grammar

    program


Terminals unused in grammar

    LBRACKET
    RBRACKET
    LBRACE
    RBRACE
    UNSORTED
    SORTED
    PLUS
    MINUS
    TIMES
    DIVIDE
    UNARY_MINUS


Rules useless in grammar

   26 program: stmt_list


Grammar

    0 $accept: stmt_list $end

    1 stmt_list: stmt
    2          | stmt_list NEWLINE stmt

    3 stmt: simple_stmt
    4     | compound_stmt

    5 simple_stmt: small_stmt
    6            | small_stmt SEMI small_stmt

    7 small_stmt: expr_stmt
    8           | print_stmt

    9 expr_stmt: NAME ASSIGN testlist

   10 testlist: test
   11         | test COMMA testlist

   12 test: NAME
   13     | NUMBER

   14 print_stmt: PRINT testlist

   15 compound_stmt: if_stmt
   16              | for_stmt
   17              | funcdef

   18 if_stmt: IF test COLON suite
   19        | IF test COLON suite ELSE COLON suite

   20 for_stmt: FOR NAME IN RANGE test COLON suite

   21 funcdef: DEF NAME LPAREN arglist RPAREN COLON suite

   22 arglist: NAME
   23        | NAME COMMA arglist

   24 suite: NEWLINE INDENT stmt_list DEDENT
   25      | simple_stmt


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    DEF (258) 21
    LPAREN (259) 21
    RPAREN (260) 21
    COLON (261) 18 19 20 21
    SEMI (262) 6
    ASSIGN (263) 9
    LBRACKET (264)
    RBRACKET (265)
    COMMA (266) 11 23
    LBRACE (267)
    RBRACE (268)
    IF (269) 18 19
    ELSE (270) 19
    FOR (271) 20
    IN (272) 20
    RANGE (273) 20
    PRINT (274) 14
    UNSORTED (275)
    SORTED (276)
    NAME (277) 9 12 20 21 22 23
    NEWLINE (278) 2 24
    INDENT (279) 24
    DEDENT (280) 24
    PLUS (281)
    MINUS (282)
    TIMES (283)
    DIVIDE (284)
    NUMBER <num> (285) 13
    UNARY_MINUS (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    stmt_list (33)
        on left: 1 2
        on right: 0 2 24
    stmt (34)
        on left: 3 4
        on right: 1 2
    simple_stmt (35)
        on left: 5 6
        on right: 3 25
    small_stmt (36)
        on left: 7 8
        on right: 5 6
    expr_stmt (37)
        on left: 9
        on right: 7
    testlist (38)
        on left: 10 11
        on right: 9 11 14
    test (39)
        on left: 12 13
        on right: 10 11 18 19 20
    print_stmt (40)
        on left: 14
        on right: 8
    compound_stmt (41)
        on left: 15 16 17
        on right: 4
    if_stmt (42)
        on left: 18 19
        on right: 15
    for_stmt (43)
        on left: 20
        on right: 16
    funcdef (44)
        on left: 21
        on right: 17
    arglist (45)
        on left: 22 23
        on right: 21 23
    suite (46)
        on left: 24 25
        on right: 18 19 20 21


State 0

    0 $accept: • stmt_list $end

    DEF    shift, and go to state 1
    IF     shift, and go to state 2
    FOR    shift, and go to state 3
    PRINT  shift, and go to state 4
    NAME   shift, and go to state 5

    stmt_list      go to state 6
    stmt           go to state 7
    simple_stmt    go to state 8
    small_stmt     go to state 9
    expr_stmt      go to state 10
    print_stmt     go to state 11
    compound_stmt  go to state 12
    if_stmt        go to state 13
    for_stmt       go to state 14
    funcdef        go to state 15


State 1

   21 funcdef: DEF • NAME LPAREN arglist RPAREN COLON suite

    NAME  shift, and go to state 16


State 2

   18 if_stmt: IF • test COLON suite
   19        | IF • test COLON suite ELSE COLON suite

    NAME    shift, and go to state 17
    NUMBER  shift, and go to state 18

    test  go to state 19


State 3

   20 for_stmt: FOR • NAME IN RANGE test COLON suite

    NAME  shift, and go to state 20


State 4

   14 print_stmt: PRINT • testlist

    NAME    shift, and go to state 17
    NUMBER  shift, and go to state 18

    testlist  go to state 21
    test      go to state 22


State 5

    9 expr_stmt: NAME • ASSIGN testlist

    ASSIGN  shift, and go to state 23


State 6

    0 $accept: stmt_list • $end
    2 stmt_list: stmt_list • NEWLINE stmt

    $end     shift, and go to state 24
    NEWLINE  shift, and go to state 25


State 7

    1 stmt_list: stmt •

    $default  reduce using rule 1 (stmt_list)


State 8

    3 stmt: simple_stmt •

    $default  reduce using rule 3 (stmt)


State 9

    5 simple_stmt: small_stmt •
    6            | small_stmt • SEMI small_stmt

    SEMI  shift, and go to state 26

    $default  reduce using rule 5 (simple_stmt)


State 10

    7 small_stmt: expr_stmt •

    $default  reduce using rule 7 (small_stmt)


State 11

    8 small_stmt: print_stmt •

    $default  reduce using rule 8 (small_stmt)


State 12

    4 stmt: compound_stmt •

    $default  reduce using rule 4 (stmt)


State 13

   15 compound_stmt: if_stmt •

    $default  reduce using rule 15 (compound_stmt)


State 14

   16 compound_stmt: for_stmt •

    $default  reduce using rule 16 (compound_stmt)


State 15

   17 compound_stmt: funcdef •

    $default  reduce using rule 17 (compound_stmt)


State 16

   21 funcdef: DEF NAME • LPAREN arglist RPAREN COLON suite

    LPAREN  shift, and go to state 27


State 17

   12 test: NAME •

    $default  reduce using rule 12 (test)


State 18

   13 test: NUMBER •

    $default  reduce using rule 13 (test)


State 19

   18 if_stmt: IF test • COLON suite
   19        | IF test • COLON suite ELSE COLON suite

    COLON  shift, and go to state 28


State 20

   20 for_stmt: FOR NAME • IN RANGE test COLON suite

    IN  shift, and go to state 29


State 21

   14 print_stmt: PRINT testlist •

    $default  reduce using rule 14 (print_stmt)


State 22

   10 testlist: test •
   11         | test • COMMA testlist

    COMMA  shift, and go to state 30

    $default  reduce using rule 10 (testlist)


State 23

    9 expr_stmt: NAME ASSIGN • testlist

    NAME    shift, and go to state 17
    NUMBER  shift, and go to state 18

    testlist  go to state 31
    test      go to state 22


State 24

    0 $accept: stmt_list $end •

    $default  accept


State 25

    2 stmt_list: stmt_list NEWLINE • stmt

    DEF    shift, and go to state 1
    IF     shift, and go to state 2
    FOR    shift, and go to state 3
    PRINT  shift, and go to state 4
    NAME   shift, and go to state 5

    stmt           go to state 32
    simple_stmt    go to state 8
    small_stmt     go to state 9
    expr_stmt      go to state 10
    print_stmt     go to state 11
    compound_stmt  go to state 12
    if_stmt        go to state 13
    for_stmt       go to state 14
    funcdef        go to state 15


State 26

    6 simple_stmt: small_stmt SEMI • small_stmt

    PRINT  shift, and go to state 4
    NAME   shift, and go to state 5

    small_stmt  go to state 33
    expr_stmt   go to state 10
    print_stmt  go to state 11


State 27

   21 funcdef: DEF NAME LPAREN • arglist RPAREN COLON suite

    NAME  shift, and go to state 34

    arglist  go to state 35


State 28

   18 if_stmt: IF test COLON • suite
   19        | IF test COLON • suite ELSE COLON suite

    PRINT    shift, and go to state 4
    NAME     shift, and go to state 5
    NEWLINE  shift, and go to state 36

    simple_stmt  go to state 37
    small_stmt   go to state 9
    expr_stmt    go to state 10
    print_stmt   go to state 11
    suite        go to state 38


State 29

   20 for_stmt: FOR NAME IN • RANGE test COLON suite

    RANGE  shift, and go to state 39


State 30

   11 testlist: test COMMA • testlist

    NAME    shift, and go to state 17
    NUMBER  shift, and go to state 18

    testlist  go to state 40
    test      go to state 22


State 31

    9 expr_stmt: NAME ASSIGN testlist •

    $default  reduce using rule 9 (expr_stmt)


State 32

    2 stmt_list: stmt_list NEWLINE stmt •

    $default  reduce using rule 2 (stmt_list)


State 33

    6 simple_stmt: small_stmt SEMI small_stmt •

    $default  reduce using rule 6 (simple_stmt)


State 34

   22 arglist: NAME •
   23        | NAME • COMMA arglist

    COMMA  shift, and go to state 41

    $default  reduce using rule 22 (arglist)


State 35

   21 funcdef: DEF NAME LPAREN arglist • RPAREN COLON suite

    RPAREN  shift, and go to state 42


State 36

   24 suite: NEWLINE • INDENT stmt_list DEDENT

    INDENT  shift, and go to state 43


State 37

   25 suite: simple_stmt •

    $default  reduce using rule 25 (suite)


State 38

   18 if_stmt: IF test COLON suite •
   19        | IF test COLON suite • ELSE COLON suite

    ELSE  shift, and go to state 44

    $default  reduce using rule 18 (if_stmt)


State 39

   20 for_stmt: FOR NAME IN RANGE • test COLON suite

    NAME    shift, and go to state 17
    NUMBER  shift, and go to state 18

    test  go to state 45


State 40

   11 testlist: test COMMA testlist •

    $default  reduce using rule 11 (testlist)


State 41

   23 arglist: NAME COMMA • arglist

    NAME  shift, and go to state 34

    arglist  go to state 46


State 42

   21 funcdef: DEF NAME LPAREN arglist RPAREN • COLON suite

    COLON  shift, and go to state 47


State 43

   24 suite: NEWLINE INDENT • stmt_list DEDENT

    DEF    shift, and go to state 1
    IF     shift, and go to state 2
    FOR    shift, and go to state 3
    PRINT  shift, and go to state 4
    NAME   shift, and go to state 5

    stmt_list      go to state 48
    stmt           go to state 7
    simple_stmt    go to state 8
    small_stmt     go to state 9
    expr_stmt      go to state 10
    print_stmt     go to state 11
    compound_stmt  go to state 12
    if_stmt        go to state 13
    for_stmt       go to state 14
    funcdef        go to state 15


State 44

   19 if_stmt: IF test COLON suite ELSE • COLON suite

    COLON  shift, and go to state 49


State 45

   20 for_stmt: FOR NAME IN RANGE test • COLON suite

    COLON  shift, and go to state 50


State 46

   23 arglist: NAME COMMA arglist •

    $default  reduce using rule 23 (arglist)


State 47

   21 funcdef: DEF NAME LPAREN arglist RPAREN COLON • suite

    PRINT    shift, and go to state 4
    NAME     shift, and go to state 5
    NEWLINE  shift, and go to state 36

    simple_stmt  go to state 37
    small_stmt   go to state 9
    expr_stmt    go to state 10
    print_stmt   go to state 11
    suite        go to state 51


State 48

    2 stmt_list: stmt_list • NEWLINE stmt
   24 suite: NEWLINE INDENT stmt_list • DEDENT

    NEWLINE  shift, and go to state 25
    DEDENT   shift, and go to state 52


State 49

   19 if_stmt: IF test COLON suite ELSE COLON • suite

    PRINT    shift, and go to state 4
    NAME     shift, and go to state 5
    NEWLINE  shift, and go to state 36

    simple_stmt  go to state 37
    small_stmt   go to state 9
    expr_stmt    go to state 10
    print_stmt   go to state 11
    suite        go to state 53


State 50

   20 for_stmt: FOR NAME IN RANGE test COLON • suite

    PRINT    shift, and go to state 4
    NAME     shift, and go to state 5
    NEWLINE  shift, and go to state 36

    simple_stmt  go to state 37
    small_stmt   go to state 9
    expr_stmt    go to state 10
    print_stmt   go to state 11
    suite        go to state 54


State 51

   21 funcdef: DEF NAME LPAREN arglist RPAREN COLON suite •

    $default  reduce using rule 21 (funcdef)


State 52

   24 suite: NEWLINE INDENT stmt_list DEDENT •

    $default  reduce using rule 24 (suite)


State 53

   19 if_stmt: IF test COLON suite ELSE COLON suite •

    $default  reduce using rule 19 (if_stmt)


State 54

   20 for_stmt: FOR NAME IN RANGE test COLON suite •

    $default  reduce using rule 20 (for_stmt)
