Terminals unused in grammar

    KEYWORD
    CONDWITHBRAC
    ARITH_ASSIGN_OP
    ARITH_OP
    SPL
    WS
    COMMENT
    FUNCTION_OPEN


State 60 conflicts: 2 shift/reduce
State 63 conflicts: 2 shift/reduce
State 64 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements NEWLINE statement
    4           | statements ";" NEWLINE statement

    5 statement: ε
    6          | simple
    7          | compound

    8 simple: expression
    9       | print

   10 expression: IDENTIFIER ASSIGN alnumlist

   11 alnumlist: alnum
   12          | alnum "," alnumlist

   13 alnum: IDENTIFIER
   14      | STRING
   15      | CONSTANT
   16      | DOUBLE_CONSTANT

   17 print: "print(" alnumlist ")"

   18 compound: if
   19         | for
   20         | funcdef
   21         | funccall

   22 if: "if(" cond ":" NEWLINE statements "else" ":" statements
   23   | "if" cond ":" NEWLINE statements "else" ":" statements

   24 cond: alnum
   25     | alnum RELOP cond
   26     | alnum LOP cond
   27     | alnum BOP cond

   28 for: "for" IDENTIFIER "in range(" alnumlist "):" statements

   29 funcdef: "def" IDENTIFIER FUNCCALL ":"

   30 funccall: FUNCCALL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KEYWORD <name> (258)
    IDENTIFIER <name> (259) 10 13 28 29
    CONDWITHBRAC <name> (260)
    FUNCCALL <name> (261) 29 30
    CONSTANT <value> (262) 15
    DOUBLE_CONSTANT <value> (263) 16
    STRING <value> (264) 14
    ARITH_ASSIGN_OP <value> (265)
    ARITH_OP <value> (266)
    RELOP <value> (267) 25
    LOP <value> (268) 26
    BOP <value> (269) 27
    ASSIGN <value> (270) 10
    SPL <value> (271)
    NEWLINE <value> (272) 3 4 22 23
    WS (273)
    COMMENT (274)
    FUNCTION_OPEN (275)
    ";" (276) 4
    "," (277) 12
    "print(" (278) 17
    ")" (279) 17
    "if(" (280) 22
    ":" (281) 22 23 29
    "else" (282) 22 23
    "if" (283) 23
    "for" (284) 28
    "in range(" (285) 28
    "):" (286) 28
    "def" (287) 29


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program (34)
        on left: 1
        on right: 0
    statements (35)
        on left: 2 3 4
        on right: 1 3 4 22 23 28
    statement (36)
        on left: 5 6 7
        on right: 2 3 4
    simple (37)
        on left: 8 9
        on right: 6
    expression (38)
        on left: 10
        on right: 8
    alnumlist (39)
        on left: 11 12
        on right: 10 12 17 28
    alnum (40)
        on left: 13 14 15 16
        on right: 11 12 24 25 26 27
    print (41)
        on left: 17
        on right: 9
    compound (42)
        on left: 18 19 20 21
        on right: 7
    if (43)
        on left: 22 23
        on right: 18
    cond (44)
        on left: 24 25 26 27
        on right: 22 23 25 26 27
    for (45)
        on left: 28
        on right: 19
    funcdef (46)
        on left: 29
        on right: 20
    funccall (47)
        on left: 30
        on right: 21


State 0

    0 $accept: • program $end

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    program     go to state 8
    statements  go to state 9
    statement   go to state 10
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 1

   10 expression: IDENTIFIER • ASSIGN alnumlist

    ASSIGN  shift, and go to state 19


State 2

   30 funccall: FUNCCALL •

    $default  reduce using rule 30 (funccall)


State 3

   17 print: "print(" • alnumlist ")"

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnumlist  go to state 24
    alnum      go to state 25


State 4

   22 if: "if(" • cond ":" NEWLINE statements "else" ":" statements

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnum  go to state 26
    cond   go to state 27


State 5

   23 if: "if" • cond ":" NEWLINE statements "else" ":" statements

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnum  go to state 26
    cond   go to state 28


State 6

   28 for: "for" • IDENTIFIER "in range(" alnumlist "):" statements

    IDENTIFIER  shift, and go to state 29


State 7

   29 funcdef: "def" • IDENTIFIER FUNCCALL ":"

    IDENTIFIER  shift, and go to state 30


State 8

    0 $accept: program • $end

    $end  shift, and go to state 31


State 9

    1 program: statements •
    3 statements: statements • NEWLINE statement
    4           | statements • ";" NEWLINE statement

    NEWLINE  shift, and go to state 32
    ";"      shift, and go to state 33

    $default  reduce using rule 1 (program)


State 10

    2 statements: statement •

    $default  reduce using rule 2 (statements)


State 11

    6 statement: simple •

    $default  reduce using rule 6 (statement)


State 12

    8 simple: expression •

    $default  reduce using rule 8 (simple)


State 13

    9 simple: print •

    $default  reduce using rule 9 (simple)


State 14

    7 statement: compound •

    $default  reduce using rule 7 (statement)


State 15

   18 compound: if •

    $default  reduce using rule 18 (compound)


State 16

   19 compound: for •

    $default  reduce using rule 19 (compound)


State 17

   20 compound: funcdef •

    $default  reduce using rule 20 (compound)


State 18

   21 compound: funccall •

    $default  reduce using rule 21 (compound)


State 19

   10 expression: IDENTIFIER ASSIGN • alnumlist

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnumlist  go to state 34
    alnum      go to state 25


State 20

   13 alnum: IDENTIFIER •

    $default  reduce using rule 13 (alnum)


State 21

   15 alnum: CONSTANT •

    $default  reduce using rule 15 (alnum)


State 22

   16 alnum: DOUBLE_CONSTANT •

    $default  reduce using rule 16 (alnum)


State 23

   14 alnum: STRING •

    $default  reduce using rule 14 (alnum)


State 24

   17 print: "print(" alnumlist • ")"

    ")"  shift, and go to state 35


State 25

   11 alnumlist: alnum •
   12          | alnum • "," alnumlist

    ","  shift, and go to state 36

    $default  reduce using rule 11 (alnumlist)


State 26

   24 cond: alnum •
   25     | alnum • RELOP cond
   26     | alnum • LOP cond
   27     | alnum • BOP cond

    RELOP  shift, and go to state 37
    LOP    shift, and go to state 38
    BOP    shift, and go to state 39

    $default  reduce using rule 24 (cond)


State 27

   22 if: "if(" cond • ":" NEWLINE statements "else" ":" statements

    ":"  shift, and go to state 40


State 28

   23 if: "if" cond • ":" NEWLINE statements "else" ":" statements

    ":"  shift, and go to state 41


State 29

   28 for: "for" IDENTIFIER • "in range(" alnumlist "):" statements

    "in range("  shift, and go to state 42


State 30

   29 funcdef: "def" IDENTIFIER • FUNCCALL ":"

    FUNCCALL  shift, and go to state 43


State 31

    0 $accept: program $end •

    $default  accept


State 32

    3 statements: statements NEWLINE • statement

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    statement   go to state 44
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 33

    4 statements: statements ";" • NEWLINE statement

    NEWLINE  shift, and go to state 45


State 34

   10 expression: IDENTIFIER ASSIGN alnumlist •

    $default  reduce using rule 10 (expression)


State 35

   17 print: "print(" alnumlist ")" •

    $default  reduce using rule 17 (print)


State 36

   12 alnumlist: alnum "," • alnumlist

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnumlist  go to state 46
    alnum      go to state 25


State 37

   25 cond: alnum RELOP • cond

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnum  go to state 26
    cond   go to state 47


State 38

   26 cond: alnum LOP • cond

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnum  go to state 26
    cond   go to state 48


State 39

   27 cond: alnum BOP • cond

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnum  go to state 26
    cond   go to state 49


State 40

   22 if: "if(" cond ":" • NEWLINE statements "else" ":" statements

    NEWLINE  shift, and go to state 50


State 41

   23 if: "if" cond ":" • NEWLINE statements "else" ":" statements

    NEWLINE  shift, and go to state 51


State 42

   28 for: "for" IDENTIFIER "in range(" • alnumlist "):" statements

    IDENTIFIER       shift, and go to state 20
    CONSTANT         shift, and go to state 21
    DOUBLE_CONSTANT  shift, and go to state 22
    STRING           shift, and go to state 23

    alnumlist  go to state 52
    alnum      go to state 25


State 43

   29 funcdef: "def" IDENTIFIER FUNCCALL • ":"

    ":"  shift, and go to state 53


State 44

    3 statements: statements NEWLINE statement •

    $default  reduce using rule 3 (statements)


State 45

    4 statements: statements ";" NEWLINE • statement

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    statement   go to state 54
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 46

   12 alnumlist: alnum "," alnumlist •

    $default  reduce using rule 12 (alnumlist)


State 47

   25 cond: alnum RELOP cond •

    $default  reduce using rule 25 (cond)


State 48

   26 cond: alnum LOP cond •

    $default  reduce using rule 26 (cond)


State 49

   27 cond: alnum BOP cond •

    $default  reduce using rule 27 (cond)


State 50

   22 if: "if(" cond ":" NEWLINE • statements "else" ":" statements

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    statements  go to state 55
    statement   go to state 10
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 51

   23 if: "if" cond ":" NEWLINE • statements "else" ":" statements

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    statements  go to state 56
    statement   go to state 10
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 52

   28 for: "for" IDENTIFIER "in range(" alnumlist • "):" statements

    "):"  shift, and go to state 57


State 53

   29 funcdef: "def" IDENTIFIER FUNCCALL ":" •

    $default  reduce using rule 29 (funcdef)


State 54

    4 statements: statements ";" NEWLINE statement •

    $default  reduce using rule 4 (statements)


State 55

    3 statements: statements • NEWLINE statement
    4           | statements • ";" NEWLINE statement
   22 if: "if(" cond ":" NEWLINE statements • "else" ":" statements

    NEWLINE  shift, and go to state 32
    ";"      shift, and go to state 33
    "else"   shift, and go to state 58


State 56

    3 statements: statements • NEWLINE statement
    4           | statements • ";" NEWLINE statement
   23 if: "if" cond ":" NEWLINE statements • "else" ":" statements

    NEWLINE  shift, and go to state 32
    ";"      shift, and go to state 33
    "else"   shift, and go to state 59


State 57

   28 for: "for" IDENTIFIER "in range(" alnumlist "):" • statements

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    statements  go to state 60
    statement   go to state 10
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 58

   22 if: "if(" cond ":" NEWLINE statements "else" • ":" statements

    ":"  shift, and go to state 61


State 59

   23 if: "if" cond ":" NEWLINE statements "else" • ":" statements

    ":"  shift, and go to state 62


State 60

    3 statements: statements • NEWLINE statement
    4           | statements • ";" NEWLINE statement
   28 for: "for" IDENTIFIER "in range(" alnumlist "):" statements •

    NEWLINE  shift, and go to state 32
    ";"      shift, and go to state 33

    NEWLINE   [reduce using rule 28 (for)]
    ";"       [reduce using rule 28 (for)]
    $default  reduce using rule 28 (for)

    shift/reduce conflict on token NEWLINE:
       28 for: "for" IDENTIFIER "in range(" alnumlist "):" statements •
        3 statements: statements • NEWLINE statement
      Example: "for" IDENTIFIER "in range(" alnumlist "):" statements • NEWLINE
      Shift derivation
        statements
        ↳ 2: statement
             ↳ 7: compound
                  ↳ 19: for
                        ↳ 28: "for" IDENTIFIER "in range(" alnumlist "):" statements
                                                                          ↳ 3: statements • NEWLINE statement
                                                                                                    ↳ 3: ε
      Reduce derivation
        statements
        ↳ 3: statements                                                                     NEWLINE statement
             ↳ 2: statement                                                                         ↳ 3: ε
                  ↳ 7: compound
                       ↳ 19: for
                             ↳ 28: "for" IDENTIFIER "in range(" alnumlist "):" statements •

    shift/reduce conflict on token ";":
       28 for: "for" IDENTIFIER "in range(" alnumlist "):" statements •
        4 statements: statements • ";" NEWLINE statement
      Example: "for" IDENTIFIER "in range(" alnumlist "):" statements • ";" NEWLINE
      Shift derivation
        statements
        ↳ 2: statement
             ↳ 7: compound
                  ↳ 19: for
                        ↳ 28: "for" IDENTIFIER "in range(" alnumlist "):" statements
                                                                          ↳ 4: statements • ";" NEWLINE statement
                                                                                                        ↳ 4: ε
      Reduce derivation
        statements
        ↳ 4: statements                                                                     ";" NEWLINE statement
             ↳ 2: statement                                                                             ↳ 4: ε
                  ↳ 7: compound
                       ↳ 19: for
                             ↳ 28: "for" IDENTIFIER "in range(" alnumlist "):" statements •



State 61

   22 if: "if(" cond ":" NEWLINE statements "else" ":" • statements

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    statements  go to state 63
    statement   go to state 10
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 62

   23 if: "if" cond ":" NEWLINE statements "else" ":" • statements

    IDENTIFIER  shift, and go to state 1
    FUNCCALL    shift, and go to state 2
    "print("    shift, and go to state 3
    "if("       shift, and go to state 4
    "if"        shift, and go to state 5
    "for"       shift, and go to state 6
    "def"       shift, and go to state 7

    $default  reduce using rule 5 (statement)

    statements  go to state 64
    statement   go to state 10
    simple      go to state 11
    expression  go to state 12
    print       go to state 13
    compound    go to state 14
    if          go to state 15
    for         go to state 16
    funcdef     go to state 17
    funccall    go to state 18


State 63

    3 statements: statements • NEWLINE statement
    4           | statements • ";" NEWLINE statement
   22 if: "if(" cond ":" NEWLINE statements "else" ":" statements •

    NEWLINE  shift, and go to state 32
    ";"      shift, and go to state 33

    NEWLINE   [reduce using rule 22 (if)]
    ";"       [reduce using rule 22 (if)]
    $default  reduce using rule 22 (if)

    shift/reduce conflict on token NEWLINE:
       22 if: "if(" cond ":" NEWLINE statements "else" ":" statements •
        3 statements: statements • NEWLINE statement
      Example: "if(" cond ":" NEWLINE statements "else" ":" statements • NEWLINE
      Shift derivation
        statements
        ↳ 2: statement
             ↳ 7: compound
                  ↳ 18: if
                        ↳ 22: "if(" cond ":" NEWLINE statements "else" ":" statements
                                                                           ↳ 3: statements • NEWLINE statement
                                                                                                     ↳ 3: ε
      Reduce derivation
        statements
        ↳ 3: statements                                                                      NEWLINE statement
             ↳ 2: statement                                                                          ↳ 3: ε
                  ↳ 7: compound
                       ↳ 18: if
                             ↳ 22: "if(" cond ":" NEWLINE statements "else" ":" statements •

    shift/reduce conflict on token ";":
       22 if: "if(" cond ":" NEWLINE statements "else" ":" statements •
        4 statements: statements • ";" NEWLINE statement
      Example: "if(" cond ":" NEWLINE statements "else" ":" statements • ";" NEWLINE
      Shift derivation
        statements
        ↳ 2: statement
             ↳ 7: compound
                  ↳ 18: if
                        ↳ 22: "if(" cond ":" NEWLINE statements "else" ":" statements
                                                                           ↳ 4: statements • ";" NEWLINE statement
                                                                                                         ↳ 4: ε
      Reduce derivation
        statements
        ↳ 4: statements                                                                      ";" NEWLINE statement
             ↳ 2: statement                                                                              ↳ 4: ε
                  ↳ 7: compound
                       ↳ 18: if
                             ↳ 22: "if(" cond ":" NEWLINE statements "else" ":" statements •



State 64

    3 statements: statements • NEWLINE statement
    4           | statements • ";" NEWLINE statement
   23 if: "if" cond ":" NEWLINE statements "else" ":" statements •

    NEWLINE  shift, and go to state 32
    ";"      shift, and go to state 33

    NEWLINE   [reduce using rule 23 (if)]
    ";"       [reduce using rule 23 (if)]
    $default  reduce using rule 23 (if)

    shift/reduce conflict on token NEWLINE:
       23 if: "if" cond ":" NEWLINE statements "else" ":" statements •
        3 statements: statements • NEWLINE statement
      Example: "if" cond ":" NEWLINE statements "else" ":" statements • NEWLINE
      Shift derivation
        statements
        ↳ 2: statement
             ↳ 7: compound
                  ↳ 18: if
                        ↳ 23: "if" cond ":" NEWLINE statements "else" ":" statements
                                                                          ↳ 3: statements • NEWLINE statement
                                                                                                    ↳ 3: ε
      Reduce derivation
        statements
        ↳ 3: statements                                                                     NEWLINE statement
             ↳ 2: statement                                                                         ↳ 3: ε
                  ↳ 7: compound
                       ↳ 18: if
                             ↳ 23: "if" cond ":" NEWLINE statements "else" ":" statements •

    shift/reduce conflict on token ";":
       23 if: "if" cond ":" NEWLINE statements "else" ":" statements •
        4 statements: statements • ";" NEWLINE statement
      Example: "if" cond ":" NEWLINE statements "else" ":" statements • ";" NEWLINE
      Shift derivation
        statements
        ↳ 2: statement
             ↳ 7: compound
                  ↳ 18: if
                        ↳ 23: "if" cond ":" NEWLINE statements "else" ":" statements
                                                                          ↳ 4: statements • ";" NEWLINE statement
                                                                                                        ↳ 4: ε
      Reduce derivation
        statements
        ↳ 4: statements                                                                     ";" NEWLINE statement
             ↳ 2: statement                                                                             ↳ 4: ε
                  ↳ 7: compound
                       ↳ 18: if
                             ↳ 23: "if" cond ":" NEWLINE statements "else" ":" statements •

