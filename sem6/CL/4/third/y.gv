// Generated by GNU Bison 3.8.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "yacc2.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • program $end\l"]
  0 -> 1 [style=solid label="DEF"]
  0 -> 2 [style=solid label="FOR"]
  0 -> 3 [style=solid label="FROM"]
  0 -> 4 [style=solid label="IF"]
  0 -> 5 [style=solid label="IMPORT"]
  0 -> 6 [style=solid label="RETURN"]
  0 -> 7 [style=solid label="IDENTIFIER"]
  0 -> 8 [style=solid label="NUMBER"]
  0 -> 9 [style=solid label="STRING"]
  0 -> 10 [style=solid label="NEWLINE"]
  0 -> 11 [style=solid label="FUNCCALL"]
  0 -> 12 [style=solid label="LPAREN"]
  0 -> 13 [style=solid label="LSQ"]
  0 -> 14 [style=dashed label="program"]
  0 -> 15 [style=dashed label="statement"]
  0 -> 16 [style=dashed label="for"]
  0 -> 17 [style=dashed label="cond"]
  0 -> 18 [style=dashed label="import"]
  0 -> 19 [style=dashed label="funcdef"]
  0 -> 20 [style=dashed label="return"]
  0 -> 21 [style=dashed label="assignment"]
  0 -> 22 [style=dashed label="list"]
  0 -> 23 [style=dashed label="expr"]
  0 -> "0R1" [style=solid]
 "0R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l 21 funcdef: DEF • FUNCCALL COLON NEWLINE INDENT program DEDENT program\l"]
  1 -> 24 [style=solid label="FUNCCALL"]
  2 [label="State 2\n\l 12 for: FOR • IDENTIFIER IN FUNCCALL COLON NEWLINE INDENT program DEDENT program\l"]
  2 -> 25 [style=solid label="IDENTIFIER"]
  3 [label="State 3\n\l 19 import: FROM • IDENTIFIER IMPORT IDENTIFIER\l 20       | FROM • IDENTIFIER IMPORT IDENTIFIER AS IDENTIFIER\l"]
  3 -> 26 [style=solid label="IDENTIFIER"]
  4 [label="State 4\n\l 13 cond: IF • expr COLON NEWLINE INDENT program DEDENT program\l 14     | IF • expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 15     | IF • expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF • expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  4 -> 7 [style=solid label="IDENTIFIER"]
  4 -> 8 [style=solid label="NUMBER"]
  4 -> 9 [style=solid label="STRING"]
  4 -> 27 [style=solid label="FUNCCALL"]
  4 -> 12 [style=solid label="LPAREN"]
  4 -> 13 [style=solid label="LSQ"]
  4 -> 22 [style=dashed label="list"]
  4 -> 28 [style=dashed label="expr"]
  5 [label="State 5\n\l 17 import: IMPORT • IDENTIFIER\l 18       | IMPORT • IDENTIFIER AS IDENTIFIER\l"]
  5 -> 29 [style=solid label="IDENTIFIER"]
  6 [label="State 6\n\l 22 return: RETURN • expr\l"]
  6 -> 7 [style=solid label="IDENTIFIER"]
  6 -> 8 [style=solid label="NUMBER"]
  6 -> 9 [style=solid label="STRING"]
  6 -> 27 [style=solid label="FUNCCALL"]
  6 -> 12 [style=solid label="LPAREN"]
  6 -> 13 [style=solid label="LSQ"]
  6 -> 22 [style=dashed label="list"]
  6 -> 30 [style=dashed label="expr"]
  7 [label="State 7\n\l 29 expr: IDENTIFIER •\l 34     | IDENTIFIER • list\l 36     | IDENTIFIER • list COMMA IDENTIFIER list\l 37     | IDENTIFIER • RELOP IDENTIFIER\l"]
  7 -> 31 [style=solid label="RELOP"]
  7 -> 13 [style=solid label="LSQ"]
  7 -> 32 [style=dashed label="list"]
  7 -> "7R29d" [label="[RELOP]", style=solid]
 "7R29d" [label="R29", fillcolor=5, shape=diamond, style=filled]
  7 -> "7R29" [style=solid]
 "7R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 31 expr: NUMBER •\l"]
  8 -> "8R31" [style=solid]
 "8R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l 32 expr: STRING •\l"]
  9 -> "9R32" [style=solid]
 "9R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 11 statement: NEWLINE •\l"]
  10 -> "10R11" [style=solid]
 "10R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l 10 statement: FUNCCALL •\l 30 expr: FUNCCALL •\l"]
  11 -> "11R10" [label="[$end, NEWLINE, DEDENT]", style=solid]
 "11R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  11 -> "11R30" [style=solid]
 "11R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l 35 expr: LPAREN • expr RPAREN\l"]
  12 -> 7 [style=solid label="IDENTIFIER"]
  12 -> 8 [style=solid label="NUMBER"]
  12 -> 9 [style=solid label="STRING"]
  12 -> 27 [style=solid label="FUNCCALL"]
  12 -> 12 [style=solid label="LPAREN"]
  12 -> 13 [style=solid label="LSQ"]
  12 -> 22 [style=dashed label="list"]
  12 -> 33 [style=dashed label="expr"]
  13 [label="State 13\n\l 25 list: LSQ • args RSQ\l"]
  13 -> 7 [style=solid label="IDENTIFIER"]
  13 -> 8 [style=solid label="NUMBER"]
  13 -> 9 [style=solid label="STRING"]
  13 -> 27 [style=solid label="FUNCCALL"]
  13 -> 12 [style=solid label="LPAREN"]
  13 -> 13 [style=solid label="LSQ"]
  13 -> 22 [style=dashed label="list"]
  13 -> 34 [style=dashed label="args"]
  13 -> 35 [style=dashed label="expr"]
  13 -> "13R26" [style=solid]
 "13R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l  0 $accept: program • $end\l"]
  14 -> 36 [style=solid label="$end"]
  15 [label="State 15\n\l  2 program: statement • NEWLINE program\l  3        | statement •\l"]
  15 -> 37 [style=solid label="NEWLINE"]
  15 -> "15R3d" [label="[NEWLINE]", style=solid]
 "15R3d" [label="R3", fillcolor=5, shape=diamond, style=filled]
  15 -> "15R3" [style=solid]
 "15R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l  7 statement: for •\l"]
  16 -> "16R7" [style=solid]
 "16R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l  8 statement: cond •\l"]
  17 -> "17R8" [style=solid]
 "17R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l  4 statement: import •\l"]
  18 -> "18R4" [style=solid]
 "18R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l  6 statement: funcdef •\l"]
  19 -> "19R6" [style=solid]
 "19R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l  9 statement: return •\l"]
  20 -> "20R9" [style=solid]
 "20R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l  5 statement: assignment •\l"]
  21 -> "21R5" [style=solid]
 "21R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l 33 expr: list •\l"]
  22 -> "22R33" [style=solid]
 "22R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l 23 assignment: expr • ARITH_ASSIGN_OP expr\l 24           | expr • ASSIGN expr\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  23 -> 38 [style=solid label="ARITH_ASSIGN_OP"]
  23 -> 39 [style=solid label="ARITH_OP"]
  23 -> 40 [style=solid label="RELOP"]
  23 -> 41 [style=solid label="LOP"]
  23 -> 42 [style=solid label="BOP"]
  23 -> 43 [style=solid label="ASSIGN"]
  24 [label="State 24\n\l 21 funcdef: DEF FUNCCALL • COLON NEWLINE INDENT program DEDENT program\l"]
  24 -> 44 [style=solid label="COLON"]
  25 [label="State 25\n\l 12 for: FOR IDENTIFIER • IN FUNCCALL COLON NEWLINE INDENT program DEDENT program\l"]
  25 -> 45 [style=solid label="IN"]
  26 [label="State 26\n\l 19 import: FROM IDENTIFIER • IMPORT IDENTIFIER\l 20       | FROM IDENTIFIER • IMPORT IDENTIFIER AS IDENTIFIER\l"]
  26 -> 46 [style=solid label="IMPORT"]
  27 [label="State 27\n\l 30 expr: FUNCCALL •\l"]
  27 -> "27R30" [style=solid]
 "27R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l 13 cond: IF expr • COLON NEWLINE INDENT program DEDENT program\l 14     | IF expr • COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 15     | IF expr • COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr • COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  28 -> 39 [style=solid label="ARITH_OP"]
  28 -> 40 [style=solid label="RELOP"]
  28 -> 41 [style=solid label="LOP"]
  28 -> 42 [style=solid label="BOP"]
  28 -> 47 [style=solid label="COLON"]
  29 [label="State 29\n\l 17 import: IMPORT IDENTIFIER •\l 18       | IMPORT IDENTIFIER • AS IDENTIFIER\l"]
  29 -> 48 [style=solid label="AS"]
  29 -> "29R17" [style=solid]
 "29R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 22 return: RETURN expr •\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  30 -> 39 [style=solid label="ARITH_OP"]
  30 -> 40 [style=solid label="RELOP"]
  30 -> 41 [style=solid label="LOP"]
  30 -> 42 [style=solid label="BOP"]
  30 -> "30R22" [style=solid]
 "30R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 37 expr: IDENTIFIER RELOP • IDENTIFIER\l"]
  31 -> 49 [style=solid label="IDENTIFIER"]
  32 [label="State 32\n\l 34 expr: IDENTIFIER list •\l 36     | IDENTIFIER list • COMMA IDENTIFIER list\l"]
  32 -> 50 [style=solid label="COMMA"]
  32 -> "32R34d" [label="[COMMA]", style=solid]
 "32R34d" [label="R34", fillcolor=5, shape=diamond, style=filled]
  32 -> "32R34" [style=solid]
 "32R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l 35 expr: LPAREN expr • RPAREN\l 38     | expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  33 -> 39 [style=solid label="ARITH_OP"]
  33 -> 40 [style=solid label="RELOP"]
  33 -> 41 [style=solid label="LOP"]
  33 -> 42 [style=solid label="BOP"]
  33 -> 51 [style=solid label="RPAREN"]
  34 [label="State 34\n\l 25 list: LSQ args • RSQ\l"]
  34 -> 52 [style=solid label="RSQ"]
  35 [label="State 35\n\l 27 args: expr •\l 28     | expr • COMMA args\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  35 -> 39 [style=solid label="ARITH_OP"]
  35 -> 40 [style=solid label="RELOP"]
  35 -> 41 [style=solid label="LOP"]
  35 -> 42 [style=solid label="BOP"]
  35 -> 53 [style=solid label="COMMA"]
  35 -> "35R27" [style=solid]
 "35R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  36 [label="State 36\n\l  0 $accept: program $end •\l"]
  36 -> "36R0" [style=solid]
 "36R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  37 [label="State 37\n\l  2 program: statement NEWLINE • program\l"]
  37 -> 1 [style=solid label="DEF"]
  37 -> 2 [style=solid label="FOR"]
  37 -> 3 [style=solid label="FROM"]
  37 -> 4 [style=solid label="IF"]
  37 -> 5 [style=solid label="IMPORT"]
  37 -> 6 [style=solid label="RETURN"]
  37 -> 7 [style=solid label="IDENTIFIER"]
  37 -> 8 [style=solid label="NUMBER"]
  37 -> 9 [style=solid label="STRING"]
  37 -> 10 [style=solid label="NEWLINE"]
  37 -> 11 [style=solid label="FUNCCALL"]
  37 -> 12 [style=solid label="LPAREN"]
  37 -> 13 [style=solid label="LSQ"]
  37 -> 54 [style=dashed label="program"]
  37 -> 15 [style=dashed label="statement"]
  37 -> 16 [style=dashed label="for"]
  37 -> 17 [style=dashed label="cond"]
  37 -> 18 [style=dashed label="import"]
  37 -> 19 [style=dashed label="funcdef"]
  37 -> 20 [style=dashed label="return"]
  37 -> 21 [style=dashed label="assignment"]
  37 -> 22 [style=dashed label="list"]
  37 -> 23 [style=dashed label="expr"]
  37 -> "37R1d" [label="[NEWLINE]", style=solid]
 "37R1d" [label="R1", fillcolor=5, shape=diamond, style=filled]
  37 -> "37R1" [style=solid]
 "37R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l 23 assignment: expr ARITH_ASSIGN_OP • expr\l"]
  38 -> 7 [style=solid label="IDENTIFIER"]
  38 -> 8 [style=solid label="NUMBER"]
  38 -> 9 [style=solid label="STRING"]
  38 -> 27 [style=solid label="FUNCCALL"]
  38 -> 12 [style=solid label="LPAREN"]
  38 -> 13 [style=solid label="LSQ"]
  38 -> 22 [style=dashed label="list"]
  38 -> 55 [style=dashed label="expr"]
  39 [label="State 39\n\l 38 expr: expr ARITH_OP • expr\l"]
  39 -> 7 [style=solid label="IDENTIFIER"]
  39 -> 8 [style=solid label="NUMBER"]
  39 -> 9 [style=solid label="STRING"]
  39 -> 27 [style=solid label="FUNCCALL"]
  39 -> 12 [style=solid label="LPAREN"]
  39 -> 13 [style=solid label="LSQ"]
  39 -> 22 [style=dashed label="list"]
  39 -> 56 [style=dashed label="expr"]
  40 [label="State 40\n\l 39 expr: expr RELOP • expr\l"]
  40 -> 7 [style=solid label="IDENTIFIER"]
  40 -> 8 [style=solid label="NUMBER"]
  40 -> 9 [style=solid label="STRING"]
  40 -> 27 [style=solid label="FUNCCALL"]
  40 -> 12 [style=solid label="LPAREN"]
  40 -> 13 [style=solid label="LSQ"]
  40 -> 22 [style=dashed label="list"]
  40 -> 57 [style=dashed label="expr"]
  41 [label="State 41\n\l 40 expr: expr LOP • expr\l"]
  41 -> 7 [style=solid label="IDENTIFIER"]
  41 -> 8 [style=solid label="NUMBER"]
  41 -> 9 [style=solid label="STRING"]
  41 -> 27 [style=solid label="FUNCCALL"]
  41 -> 12 [style=solid label="LPAREN"]
  41 -> 13 [style=solid label="LSQ"]
  41 -> 22 [style=dashed label="list"]
  41 -> 58 [style=dashed label="expr"]
  42 [label="State 42\n\l 41 expr: expr BOP • expr\l"]
  42 -> 7 [style=solid label="IDENTIFIER"]
  42 -> 8 [style=solid label="NUMBER"]
  42 -> 9 [style=solid label="STRING"]
  42 -> 27 [style=solid label="FUNCCALL"]
  42 -> 12 [style=solid label="LPAREN"]
  42 -> 13 [style=solid label="LSQ"]
  42 -> 22 [style=dashed label="list"]
  42 -> 59 [style=dashed label="expr"]
  43 [label="State 43\n\l 24 assignment: expr ASSIGN • expr\l"]
  43 -> 7 [style=solid label="IDENTIFIER"]
  43 -> 8 [style=solid label="NUMBER"]
  43 -> 9 [style=solid label="STRING"]
  43 -> 27 [style=solid label="FUNCCALL"]
  43 -> 12 [style=solid label="LPAREN"]
  43 -> 13 [style=solid label="LSQ"]
  43 -> 22 [style=dashed label="list"]
  43 -> 60 [style=dashed label="expr"]
  44 [label="State 44\n\l 21 funcdef: DEF FUNCCALL COLON • NEWLINE INDENT program DEDENT program\l"]
  44 -> 61 [style=solid label="NEWLINE"]
  45 [label="State 45\n\l 12 for: FOR IDENTIFIER IN • FUNCCALL COLON NEWLINE INDENT program DEDENT program\l"]
  45 -> 62 [style=solid label="FUNCCALL"]
  46 [label="State 46\n\l 19 import: FROM IDENTIFIER IMPORT • IDENTIFIER\l 20       | FROM IDENTIFIER IMPORT • IDENTIFIER AS IDENTIFIER\l"]
  46 -> 63 [style=solid label="IDENTIFIER"]
  47 [label="State 47\n\l 13 cond: IF expr COLON • NEWLINE INDENT program DEDENT program\l 14     | IF expr COLON • NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 15     | IF expr COLON • NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON • NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  47 -> 64 [style=solid label="NEWLINE"]
  48 [label="State 48\n\l 18 import: IMPORT IDENTIFIER AS • IDENTIFIER\l"]
  48 -> 65 [style=solid label="IDENTIFIER"]
  49 [label="State 49\n\l 37 expr: IDENTIFIER RELOP IDENTIFIER •\l"]
  49 -> "49R37" [style=solid]
 "49R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  50 [label="State 50\n\l 36 expr: IDENTIFIER list COMMA • IDENTIFIER list\l"]
  50 -> 66 [style=solid label="IDENTIFIER"]
  51 [label="State 51\n\l 35 expr: LPAREN expr RPAREN •\l"]
  51 -> "51R35" [style=solid]
 "51R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l 25 list: LSQ args RSQ •\l"]
  52 -> "52R25" [style=solid]
 "52R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  53 [label="State 53\n\l 28 args: expr COMMA • args\l"]
  53 -> 7 [style=solid label="IDENTIFIER"]
  53 -> 8 [style=solid label="NUMBER"]
  53 -> 9 [style=solid label="STRING"]
  53 -> 27 [style=solid label="FUNCCALL"]
  53 -> 12 [style=solid label="LPAREN"]
  53 -> 13 [style=solid label="LSQ"]
  53 -> 22 [style=dashed label="list"]
  53 -> 67 [style=dashed label="args"]
  53 -> 35 [style=dashed label="expr"]
  53 -> "53R26" [style=solid]
 "53R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  54 [label="State 54\n\l  2 program: statement NEWLINE program •\l"]
  54 -> "54R2" [style=solid]
 "54R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l 23 assignment: expr ARITH_ASSIGN_OP expr •\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  55 -> 39 [style=solid label="ARITH_OP"]
  55 -> 40 [style=solid label="RELOP"]
  55 -> 41 [style=solid label="LOP"]
  55 -> 42 [style=solid label="BOP"]
  55 -> "55R23" [style=solid]
 "55R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  56 [label="State 56\n\l 38 expr: expr • ARITH_OP expr\l 38     | expr ARITH_OP expr •\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  56 -> 39 [style=solid label="ARITH_OP"]
  56 -> 40 [style=solid label="RELOP"]
  56 -> 41 [style=solid label="LOP"]
  56 -> 42 [style=solid label="BOP"]
  56 -> "56R38d" [label="[ARITH_OP, RELOP, LOP, BOP]", style=solid]
 "56R38d" [label="R38", fillcolor=5, shape=diamond, style=filled]
  56 -> "56R38" [style=solid]
 "56R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 39     | expr RELOP expr •\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  57 -> 39 [style=solid label="ARITH_OP"]
  57 -> 40 [style=solid label="RELOP"]
  57 -> 41 [style=solid label="LOP"]
  57 -> 42 [style=solid label="BOP"]
  57 -> "57R39d" [label="[ARITH_OP, RELOP, LOP, BOP]", style=solid]
 "57R39d" [label="R39", fillcolor=5, shape=diamond, style=filled]
  57 -> "57R39" [style=solid]
 "57R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 40     | expr LOP expr •\l 41     | expr • BOP expr\l"]
  58 -> 39 [style=solid label="ARITH_OP"]
  58 -> 40 [style=solid label="RELOP"]
  58 -> 41 [style=solid label="LOP"]
  58 -> 42 [style=solid label="BOP"]
  58 -> "58R40d" [label="[ARITH_OP, RELOP, LOP, BOP]", style=solid]
 "58R40d" [label="R40", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R40" [style=solid]
 "58R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l 41     | expr BOP expr •\l"]
  59 -> 39 [style=solid label="ARITH_OP"]
  59 -> 40 [style=solid label="RELOP"]
  59 -> 41 [style=solid label="LOP"]
  59 -> 42 [style=solid label="BOP"]
  59 -> "59R41d" [label="[ARITH_OP, RELOP, LOP, BOP]", style=solid]
 "59R41d" [label="R41", fillcolor=5, shape=diamond, style=filled]
  59 -> "59R41" [style=solid]
 "59R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 24 assignment: expr ASSIGN expr •\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  60 -> 39 [style=solid label="ARITH_OP"]
  60 -> 40 [style=solid label="RELOP"]
  60 -> 41 [style=solid label="LOP"]
  60 -> 42 [style=solid label="BOP"]
  60 -> "60R24" [style=solid]
 "60R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 21 funcdef: DEF FUNCCALL COLON NEWLINE • INDENT program DEDENT program\l"]
  61 -> 68 [style=solid label="INDENT"]
  62 [label="State 62\n\l 12 for: FOR IDENTIFIER IN FUNCCALL • COLON NEWLINE INDENT program DEDENT program\l"]
  62 -> 69 [style=solid label="COLON"]
  63 [label="State 63\n\l 19 import: FROM IDENTIFIER IMPORT IDENTIFIER •\l 20       | FROM IDENTIFIER IMPORT IDENTIFIER • AS IDENTIFIER\l"]
  63 -> 70 [style=solid label="AS"]
  63 -> "63R19" [style=solid]
 "63R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 13 cond: IF expr COLON NEWLINE • INDENT program DEDENT program\l 14     | IF expr COLON NEWLINE • INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 15     | IF expr COLON NEWLINE • INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE • INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  64 -> 71 [style=solid label="INDENT"]
  65 [label="State 65\n\l 18 import: IMPORT IDENTIFIER AS IDENTIFIER •\l"]
  65 -> "65R18" [style=solid]
 "65R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l 36 expr: IDENTIFIER list COMMA IDENTIFIER • list\l"]
  66 -> 13 [style=solid label="LSQ"]
  66 -> 72 [style=dashed label="list"]
  67 [label="State 67\n\l 28 args: expr COMMA args •\l"]
  67 -> "67R28" [style=solid]
 "67R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l 21 funcdef: DEF FUNCCALL COLON NEWLINE INDENT • program DEDENT program\l"]
  68 -> 1 [style=solid label="DEF"]
  68 -> 2 [style=solid label="FOR"]
  68 -> 3 [style=solid label="FROM"]
  68 -> 4 [style=solid label="IF"]
  68 -> 5 [style=solid label="IMPORT"]
  68 -> 6 [style=solid label="RETURN"]
  68 -> 7 [style=solid label="IDENTIFIER"]
  68 -> 8 [style=solid label="NUMBER"]
  68 -> 9 [style=solid label="STRING"]
  68 -> 10 [style=solid label="NEWLINE"]
  68 -> 11 [style=solid label="FUNCCALL"]
  68 -> 12 [style=solid label="LPAREN"]
  68 -> 13 [style=solid label="LSQ"]
  68 -> 73 [style=dashed label="program"]
  68 -> 15 [style=dashed label="statement"]
  68 -> 16 [style=dashed label="for"]
  68 -> 17 [style=dashed label="cond"]
  68 -> 18 [style=dashed label="import"]
  68 -> 19 [style=dashed label="funcdef"]
  68 -> 20 [style=dashed label="return"]
  68 -> 21 [style=dashed label="assignment"]
  68 -> 22 [style=dashed label="list"]
  68 -> 23 [style=dashed label="expr"]
  68 -> "68R1" [style=solid]
 "68R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  69 [label="State 69\n\l 12 for: FOR IDENTIFIER IN FUNCCALL COLON • NEWLINE INDENT program DEDENT program\l"]
  69 -> 74 [style=solid label="NEWLINE"]
  70 [label="State 70\n\l 20 import: FROM IDENTIFIER IMPORT IDENTIFIER AS • IDENTIFIER\l"]
  70 -> 75 [style=solid label="IDENTIFIER"]
  71 [label="State 71\n\l 13 cond: IF expr COLON NEWLINE INDENT • program DEDENT program\l 14     | IF expr COLON NEWLINE INDENT • program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 15     | IF expr COLON NEWLINE INDENT • program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT • program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  71 -> 1 [style=solid label="DEF"]
  71 -> 2 [style=solid label="FOR"]
  71 -> 3 [style=solid label="FROM"]
  71 -> 4 [style=solid label="IF"]
  71 -> 5 [style=solid label="IMPORT"]
  71 -> 6 [style=solid label="RETURN"]
  71 -> 7 [style=solid label="IDENTIFIER"]
  71 -> 8 [style=solid label="NUMBER"]
  71 -> 9 [style=solid label="STRING"]
  71 -> 10 [style=solid label="NEWLINE"]
  71 -> 11 [style=solid label="FUNCCALL"]
  71 -> 12 [style=solid label="LPAREN"]
  71 -> 13 [style=solid label="LSQ"]
  71 -> 76 [style=dashed label="program"]
  71 -> 15 [style=dashed label="statement"]
  71 -> 16 [style=dashed label="for"]
  71 -> 17 [style=dashed label="cond"]
  71 -> 18 [style=dashed label="import"]
  71 -> 19 [style=dashed label="funcdef"]
  71 -> 20 [style=dashed label="return"]
  71 -> 21 [style=dashed label="assignment"]
  71 -> 22 [style=dashed label="list"]
  71 -> 23 [style=dashed label="expr"]
  71 -> "71R1" [style=solid]
 "71R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  72 [label="State 72\n\l 36 expr: IDENTIFIER list COMMA IDENTIFIER list •\l"]
  72 -> "72R36" [style=solid]
 "72R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l 21 funcdef: DEF FUNCCALL COLON NEWLINE INDENT program • DEDENT program\l"]
  73 -> 77 [style=solid label="DEDENT"]
  74 [label="State 74\n\l 12 for: FOR IDENTIFIER IN FUNCCALL COLON NEWLINE • INDENT program DEDENT program\l"]
  74 -> 78 [style=solid label="INDENT"]
  75 [label="State 75\n\l 20 import: FROM IDENTIFIER IMPORT IDENTIFIER AS IDENTIFIER •\l"]
  75 -> "75R20" [style=solid]
 "75R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  76 [label="State 76\n\l 13 cond: IF expr COLON NEWLINE INDENT program • DEDENT program\l 14     | IF expr COLON NEWLINE INDENT program • DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 15     | IF expr COLON NEWLINE INDENT program • DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program • DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  76 -> 79 [style=solid label="DEDENT"]
  77 [label="State 77\n\l 21 funcdef: DEF FUNCCALL COLON NEWLINE INDENT program DEDENT • program\l"]
  77 -> 1 [style=solid label="DEF"]
  77 -> 2 [style=solid label="FOR"]
  77 -> 3 [style=solid label="FROM"]
  77 -> 4 [style=solid label="IF"]
  77 -> 5 [style=solid label="IMPORT"]
  77 -> 6 [style=solid label="RETURN"]
  77 -> 7 [style=solid label="IDENTIFIER"]
  77 -> 8 [style=solid label="NUMBER"]
  77 -> 9 [style=solid label="STRING"]
  77 -> 10 [style=solid label="NEWLINE"]
  77 -> 11 [style=solid label="FUNCCALL"]
  77 -> 12 [style=solid label="LPAREN"]
  77 -> 13 [style=solid label="LSQ"]
  77 -> 80 [style=dashed label="program"]
  77 -> 15 [style=dashed label="statement"]
  77 -> 16 [style=dashed label="for"]
  77 -> 17 [style=dashed label="cond"]
  77 -> 18 [style=dashed label="import"]
  77 -> 19 [style=dashed label="funcdef"]
  77 -> 20 [style=dashed label="return"]
  77 -> 21 [style=dashed label="assignment"]
  77 -> 22 [style=dashed label="list"]
  77 -> 23 [style=dashed label="expr"]
  77 -> "77R1d" [label="[NEWLINE]", style=solid]
 "77R1d" [label="R1", fillcolor=5, shape=diamond, style=filled]
  77 -> "77R1" [style=solid]
 "77R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l 12 for: FOR IDENTIFIER IN FUNCCALL COLON NEWLINE INDENT • program DEDENT program\l"]
  78 -> 1 [style=solid label="DEF"]
  78 -> 2 [style=solid label="FOR"]
  78 -> 3 [style=solid label="FROM"]
  78 -> 4 [style=solid label="IF"]
  78 -> 5 [style=solid label="IMPORT"]
  78 -> 6 [style=solid label="RETURN"]
  78 -> 7 [style=solid label="IDENTIFIER"]
  78 -> 8 [style=solid label="NUMBER"]
  78 -> 9 [style=solid label="STRING"]
  78 -> 10 [style=solid label="NEWLINE"]
  78 -> 11 [style=solid label="FUNCCALL"]
  78 -> 12 [style=solid label="LPAREN"]
  78 -> 13 [style=solid label="LSQ"]
  78 -> 81 [style=dashed label="program"]
  78 -> 15 [style=dashed label="statement"]
  78 -> 16 [style=dashed label="for"]
  78 -> 17 [style=dashed label="cond"]
  78 -> 18 [style=dashed label="import"]
  78 -> 19 [style=dashed label="funcdef"]
  78 -> 20 [style=dashed label="return"]
  78 -> 21 [style=dashed label="assignment"]
  78 -> 22 [style=dashed label="list"]
  78 -> 23 [style=dashed label="expr"]
  78 -> "78R1" [style=solid]
 "78R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l 13 cond: IF expr COLON NEWLINE INDENT program DEDENT • program\l 14     | IF expr COLON NEWLINE INDENT program DEDENT • ELSE COLON NEWLINE INDENT program DEDENT program\l 15     | IF expr COLON NEWLINE INDENT program DEDENT • ELIF expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT • ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  79 -> 1 [style=solid label="DEF"]
  79 -> 2 [style=solid label="FOR"]
  79 -> 3 [style=solid label="FROM"]
  79 -> 4 [style=solid label="IF"]
  79 -> 5 [style=solid label="IMPORT"]
  79 -> 6 [style=solid label="RETURN"]
  79 -> 7 [style=solid label="IDENTIFIER"]
  79 -> 8 [style=solid label="NUMBER"]
  79 -> 9 [style=solid label="STRING"]
  79 -> 10 [style=solid label="NEWLINE"]
  79 -> 11 [style=solid label="FUNCCALL"]
  79 -> 12 [style=solid label="LPAREN"]
  79 -> 13 [style=solid label="LSQ"]
  79 -> 82 [style=solid label="ELIF"]
  79 -> 83 [style=solid label="ELSE"]
  79 -> 84 [style=dashed label="program"]
  79 -> 15 [style=dashed label="statement"]
  79 -> 16 [style=dashed label="for"]
  79 -> 17 [style=dashed label="cond"]
  79 -> 18 [style=dashed label="import"]
  79 -> 19 [style=dashed label="funcdef"]
  79 -> 20 [style=dashed label="return"]
  79 -> 21 [style=dashed label="assignment"]
  79 -> 22 [style=dashed label="list"]
  79 -> 23 [style=dashed label="expr"]
  79 -> "79R1d" [label="[NEWLINE]", style=solid]
 "79R1d" [label="R1", fillcolor=5, shape=diamond, style=filled]
  79 -> "79R1" [style=solid]
 "79R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l 21 funcdef: DEF FUNCCALL COLON NEWLINE INDENT program DEDENT program •\l"]
  80 -> "80R21" [style=solid]
 "80R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l 12 for: FOR IDENTIFIER IN FUNCCALL COLON NEWLINE INDENT program • DEDENT program\l"]
  81 -> 85 [style=solid label="DEDENT"]
  82 [label="State 82\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF • expr COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT ELIF • expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  82 -> 7 [style=solid label="IDENTIFIER"]
  82 -> 8 [style=solid label="NUMBER"]
  82 -> 9 [style=solid label="STRING"]
  82 -> 27 [style=solid label="FUNCCALL"]
  82 -> 12 [style=solid label="LPAREN"]
  82 -> 13 [style=solid label="LSQ"]
  82 -> 22 [style=dashed label="list"]
  82 -> 86 [style=dashed label="expr"]
  83 [label="State 83\n\l 14 cond: IF expr COLON NEWLINE INDENT program DEDENT ELSE • COLON NEWLINE INDENT program DEDENT program\l"]
  83 -> 87 [style=solid label="COLON"]
  84 [label="State 84\n\l 13 cond: IF expr COLON NEWLINE INDENT program DEDENT program •\l"]
  84 -> "84R13" [style=solid]
 "84R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l 12 for: FOR IDENTIFIER IN FUNCCALL COLON NEWLINE INDENT program DEDENT • program\l"]
  85 -> 1 [style=solid label="DEF"]
  85 -> 2 [style=solid label="FOR"]
  85 -> 3 [style=solid label="FROM"]
  85 -> 4 [style=solid label="IF"]
  85 -> 5 [style=solid label="IMPORT"]
  85 -> 6 [style=solid label="RETURN"]
  85 -> 7 [style=solid label="IDENTIFIER"]
  85 -> 8 [style=solid label="NUMBER"]
  85 -> 9 [style=solid label="STRING"]
  85 -> 10 [style=solid label="NEWLINE"]
  85 -> 11 [style=solid label="FUNCCALL"]
  85 -> 12 [style=solid label="LPAREN"]
  85 -> 13 [style=solid label="LSQ"]
  85 -> 88 [style=dashed label="program"]
  85 -> 15 [style=dashed label="statement"]
  85 -> 16 [style=dashed label="for"]
  85 -> 17 [style=dashed label="cond"]
  85 -> 18 [style=dashed label="import"]
  85 -> 19 [style=dashed label="funcdef"]
  85 -> 20 [style=dashed label="return"]
  85 -> 21 [style=dashed label="assignment"]
  85 -> 22 [style=dashed label="list"]
  85 -> 23 [style=dashed label="expr"]
  85 -> "85R1d" [label="[NEWLINE]", style=solid]
 "85R1d" [label="R1", fillcolor=5, shape=diamond, style=filled]
  85 -> "85R1" [style=solid]
 "85R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr • COLON NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT ELIF expr • COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l 38 expr: expr • ARITH_OP expr\l 39     | expr • RELOP expr\l 40     | expr • LOP expr\l 41     | expr • BOP expr\l"]
  86 -> 39 [style=solid label="ARITH_OP"]
  86 -> 40 [style=solid label="RELOP"]
  86 -> 41 [style=solid label="LOP"]
  86 -> 42 [style=solid label="BOP"]
  86 -> 89 [style=solid label="COLON"]
  87 [label="State 87\n\l 14 cond: IF expr COLON NEWLINE INDENT program DEDENT ELSE COLON • NEWLINE INDENT program DEDENT program\l"]
  87 -> 90 [style=solid label="NEWLINE"]
  88 [label="State 88\n\l 12 for: FOR IDENTIFIER IN FUNCCALL COLON NEWLINE INDENT program DEDENT program •\l"]
  88 -> "88R12" [style=solid]
 "88R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  89 [label="State 89\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON • NEWLINE INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON • NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  89 -> 91 [style=solid label="NEWLINE"]
  90 [label="State 90\n\l 14 cond: IF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE • INDENT program DEDENT program\l"]
  90 -> 92 [style=solid label="INDENT"]
  91 [label="State 91\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE • INDENT program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE • INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  91 -> 93 [style=solid label="INDENT"]
  92 [label="State 92\n\l 14 cond: IF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT • program DEDENT program\l"]
  92 -> 1 [style=solid label="DEF"]
  92 -> 2 [style=solid label="FOR"]
  92 -> 3 [style=solid label="FROM"]
  92 -> 4 [style=solid label="IF"]
  92 -> 5 [style=solid label="IMPORT"]
  92 -> 6 [style=solid label="RETURN"]
  92 -> 7 [style=solid label="IDENTIFIER"]
  92 -> 8 [style=solid label="NUMBER"]
  92 -> 9 [style=solid label="STRING"]
  92 -> 10 [style=solid label="NEWLINE"]
  92 -> 11 [style=solid label="FUNCCALL"]
  92 -> 12 [style=solid label="LPAREN"]
  92 -> 13 [style=solid label="LSQ"]
  92 -> 94 [style=dashed label="program"]
  92 -> 15 [style=dashed label="statement"]
  92 -> 16 [style=dashed label="for"]
  92 -> 17 [style=dashed label="cond"]
  92 -> 18 [style=dashed label="import"]
  92 -> 19 [style=dashed label="funcdef"]
  92 -> 20 [style=dashed label="return"]
  92 -> 21 [style=dashed label="assignment"]
  92 -> 22 [style=dashed label="list"]
  92 -> 23 [style=dashed label="expr"]
  92 -> "92R1" [style=solid]
 "92R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT • program DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT • program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  93 -> 1 [style=solid label="DEF"]
  93 -> 2 [style=solid label="FOR"]
  93 -> 3 [style=solid label="FROM"]
  93 -> 4 [style=solid label="IF"]
  93 -> 5 [style=solid label="IMPORT"]
  93 -> 6 [style=solid label="RETURN"]
  93 -> 7 [style=solid label="IDENTIFIER"]
  93 -> 8 [style=solid label="NUMBER"]
  93 -> 9 [style=solid label="STRING"]
  93 -> 10 [style=solid label="NEWLINE"]
  93 -> 11 [style=solid label="FUNCCALL"]
  93 -> 12 [style=solid label="LPAREN"]
  93 -> 13 [style=solid label="LSQ"]
  93 -> 95 [style=dashed label="program"]
  93 -> 15 [style=dashed label="statement"]
  93 -> 16 [style=dashed label="for"]
  93 -> 17 [style=dashed label="cond"]
  93 -> 18 [style=dashed label="import"]
  93 -> 19 [style=dashed label="funcdef"]
  93 -> 20 [style=dashed label="return"]
  93 -> 21 [style=dashed label="assignment"]
  93 -> 22 [style=dashed label="list"]
  93 -> 23 [style=dashed label="expr"]
  93 -> "93R1" [style=solid]
 "93R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  94 [label="State 94\n\l 14 cond: IF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program • DEDENT program\l"]
  94 -> 96 [style=solid label="DEDENT"]
  95 [label="State 95\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program • DEDENT program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program • DEDENT ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  95 -> 97 [style=solid label="DEDENT"]
  96 [label="State 96\n\l 14 cond: IF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT • program\l"]
  96 -> 1 [style=solid label="DEF"]
  96 -> 2 [style=solid label="FOR"]
  96 -> 3 [style=solid label="FROM"]
  96 -> 4 [style=solid label="IF"]
  96 -> 5 [style=solid label="IMPORT"]
  96 -> 6 [style=solid label="RETURN"]
  96 -> 7 [style=solid label="IDENTIFIER"]
  96 -> 8 [style=solid label="NUMBER"]
  96 -> 9 [style=solid label="STRING"]
  96 -> 10 [style=solid label="NEWLINE"]
  96 -> 11 [style=solid label="FUNCCALL"]
  96 -> 12 [style=solid label="LPAREN"]
  96 -> 13 [style=solid label="LSQ"]
  96 -> 98 [style=dashed label="program"]
  96 -> 15 [style=dashed label="statement"]
  96 -> 16 [style=dashed label="for"]
  96 -> 17 [style=dashed label="cond"]
  96 -> 18 [style=dashed label="import"]
  96 -> 19 [style=dashed label="funcdef"]
  96 -> 20 [style=dashed label="return"]
  96 -> 21 [style=dashed label="assignment"]
  96 -> 22 [style=dashed label="list"]
  96 -> 23 [style=dashed label="expr"]
  96 -> "96R1d" [label="[NEWLINE]", style=solid]
 "96R1d" [label="R1", fillcolor=5, shape=diamond, style=filled]
  96 -> "96R1" [style=solid]
 "96R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT • program\l 16     | IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT • ELSE COLON NEWLINE INDENT program DEDENT program\l"]
  97 -> 1 [style=solid label="DEF"]
  97 -> 2 [style=solid label="FOR"]
  97 -> 3 [style=solid label="FROM"]
  97 -> 4 [style=solid label="IF"]
  97 -> 5 [style=solid label="IMPORT"]
  97 -> 6 [style=solid label="RETURN"]
  97 -> 7 [style=solid label="IDENTIFIER"]
  97 -> 8 [style=solid label="NUMBER"]
  97 -> 9 [style=solid label="STRING"]
  97 -> 10 [style=solid label="NEWLINE"]
  97 -> 11 [style=solid label="FUNCCALL"]
  97 -> 12 [style=solid label="LPAREN"]
  97 -> 13 [style=solid label="LSQ"]
  97 -> 99 [style=solid label="ELSE"]
  97 -> 100 [style=dashed label="program"]
  97 -> 15 [style=dashed label="statement"]
  97 -> 16 [style=dashed label="for"]
  97 -> 17 [style=dashed label="cond"]
  97 -> 18 [style=dashed label="import"]
  97 -> 19 [style=dashed label="funcdef"]
  97 -> 20 [style=dashed label="return"]
  97 -> 21 [style=dashed label="assignment"]
  97 -> 22 [style=dashed label="list"]
  97 -> 23 [style=dashed label="expr"]
  97 -> "97R1d" [label="[NEWLINE]", style=solid]
 "97R1d" [label="R1", fillcolor=5, shape=diamond, style=filled]
  97 -> "97R1" [style=solid]
 "97R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l 14 cond: IF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program •\l"]
  98 -> "98R14" [style=solid]
 "98R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l 16 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE • COLON NEWLINE INDENT program DEDENT program\l"]
  99 -> 101 [style=solid label="COLON"]
  100 [label="State 100\n\l 15 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT program •\l"]
  100 -> "100R15" [style=solid]
 "100R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 16 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON • NEWLINE INDENT program DEDENT program\l"]
  101 -> 102 [style=solid label="NEWLINE"]
  102 [label="State 102\n\l 16 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE • INDENT program DEDENT program\l"]
  102 -> 103 [style=solid label="INDENT"]
  103 [label="State 103\n\l 16 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT • program DEDENT program\l"]
  103 -> 1 [style=solid label="DEF"]
  103 -> 2 [style=solid label="FOR"]
  103 -> 3 [style=solid label="FROM"]
  103 -> 4 [style=solid label="IF"]
  103 -> 5 [style=solid label="IMPORT"]
  103 -> 6 [style=solid label="RETURN"]
  103 -> 7 [style=solid label="IDENTIFIER"]
  103 -> 8 [style=solid label="NUMBER"]
  103 -> 9 [style=solid label="STRING"]
  103 -> 10 [style=solid label="NEWLINE"]
  103 -> 11 [style=solid label="FUNCCALL"]
  103 -> 12 [style=solid label="LPAREN"]
  103 -> 13 [style=solid label="LSQ"]
  103 -> 104 [style=dashed label="program"]
  103 -> 15 [style=dashed label="statement"]
  103 -> 16 [style=dashed label="for"]
  103 -> 17 [style=dashed label="cond"]
  103 -> 18 [style=dashed label="import"]
  103 -> 19 [style=dashed label="funcdef"]
  103 -> 20 [style=dashed label="return"]
  103 -> 21 [style=dashed label="assignment"]
  103 -> 22 [style=dashed label="list"]
  103 -> 23 [style=dashed label="expr"]
  103 -> "103R1" [style=solid]
 "103R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 16 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program • DEDENT program\l"]
  104 -> 105 [style=solid label="DEDENT"]
  105 [label="State 105\n\l 16 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT • program\l"]
  105 -> 1 [style=solid label="DEF"]
  105 -> 2 [style=solid label="FOR"]
  105 -> 3 [style=solid label="FROM"]
  105 -> 4 [style=solid label="IF"]
  105 -> 5 [style=solid label="IMPORT"]
  105 -> 6 [style=solid label="RETURN"]
  105 -> 7 [style=solid label="IDENTIFIER"]
  105 -> 8 [style=solid label="NUMBER"]
  105 -> 9 [style=solid label="STRING"]
  105 -> 10 [style=solid label="NEWLINE"]
  105 -> 11 [style=solid label="FUNCCALL"]
  105 -> 12 [style=solid label="LPAREN"]
  105 -> 13 [style=solid label="LSQ"]
  105 -> 106 [style=dashed label="program"]
  105 -> 15 [style=dashed label="statement"]
  105 -> 16 [style=dashed label="for"]
  105 -> 17 [style=dashed label="cond"]
  105 -> 18 [style=dashed label="import"]
  105 -> 19 [style=dashed label="funcdef"]
  105 -> 20 [style=dashed label="return"]
  105 -> 21 [style=dashed label="assignment"]
  105 -> 22 [style=dashed label="list"]
  105 -> 23 [style=dashed label="expr"]
  105 -> "105R1d" [label="[NEWLINE]", style=solid]
 "105R1d" [label="R1", fillcolor=5, shape=diamond, style=filled]
  105 -> "105R1" [style=solid]
 "105R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l 16 cond: IF expr COLON NEWLINE INDENT program DEDENT ELIF expr COLON NEWLINE INDENT program DEDENT ELSE COLON NEWLINE INDENT program DEDENT program •\l"]
  106 -> "106R16" [style=solid]
 "106R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
}
