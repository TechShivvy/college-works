Terminals unused in grammar

    INFUN
    KEYWORD
    SPL


State 42 conflicts: 3 shift/reduce
State 43 conflicts: 3 shift/reduce
State 44 conflicts: 3 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statement program
    2        | statement

    3 statement: import
    4          | assignment
    5          | funcall
    6          | cond

    7 cond: IF expr ':' INDENT program DEDENT

    8 import: IMPORT IDENTIFIER
    9       | IMPORT IDENTIFIER AS IDENTIFIER
   10       | FROM IDENTIFIER IMPORT IDENTIFIER
   11       | FROM IDENTIFIER IMPORT IDENTIFIER AS IDENTIFIER

   12 assignment: IDENTIFIER ASSIGNOP expr
   13           | IDENTIFIER ARITHASS expr

   14 funcall: IDENTIFIER '(' args ')'

   15 list: '[' args ']'

   16 args: expr
   17     | expr ',' args
   18     | ε

   19 expr: IDENTIFIER
   20     | funcall
   21     | INT
   22     | FLOAT
   23     | STRING
   24     | list
   25     | expr ARITHOP expr
   26     | expr RELOP expr
   27     | expr LOGICOP expr
   28     | '(' expr ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 14 28
    ')' (41) 14 28
    ',' (44) 17
    ':' (58) 7
    '[' (91) 15
    ']' (93) 15
    error (256)
    IF (258) 7
    IMPORT (259) 8 9 10 11
    AS (260) 9 11
    FROM (261) 10 11
    INDENT (262) 7
    DEDENT (263) 7
    LOGICOP (264) 27
    RELOP (265) 26
    ARITHOP (266) 25
    ARITHASS (267) 13
    ASSIGNOP (268) 12
    INFUN (269)
    KEYWORD (270)
    IDENTIFIER (271) 8 9 10 11 12 13 14 19
    SPL (272)
    INT (273) 21
    FLOAT (274) 22
    STRING (275) 23


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    program (28)
        on left: 1 2
        on right: 0 1 7
    statement (29)
        on left: 3 4 5 6
        on right: 1 2
    cond (30)
        on left: 7
        on right: 6
    import (31)
        on left: 8 9 10 11
        on right: 3
    assignment (32)
        on left: 12 13
        on right: 4
    funcall (33)
        on left: 14
        on right: 5 20
    list (34)
        on left: 15
        on right: 24
    args (35)
        on left: 16 17 18
        on right: 14 15 17
    expr (36)
        on left: 19 20 21 22 23 24 25 26 27 28
        on right: 7 12 13 16 17 25 26 27 28


State 0

    0 $accept: • program $end

    IF          shift, and go to state 1
    IMPORT      shift, and go to state 2
    FROM        shift, and go to state 3
    IDENTIFIER  shift, and go to state 4

    program     go to state 5
    statement   go to state 6
    cond        go to state 7
    import      go to state 8
    assignment  go to state 9
    funcall     go to state 10


State 1

    7 cond: IF • expr ':' INDENT program DEDENT

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    funcall  go to state 17
    list     go to state 18
    expr     go to state 19


State 2

    8 import: IMPORT • IDENTIFIER
    9       | IMPORT • IDENTIFIER AS IDENTIFIER

    IDENTIFIER  shift, and go to state 20


State 3

   10 import: FROM • IDENTIFIER IMPORT IDENTIFIER
   11       | FROM • IDENTIFIER IMPORT IDENTIFIER AS IDENTIFIER

    IDENTIFIER  shift, and go to state 21


State 4

   12 assignment: IDENTIFIER • ASSIGNOP expr
   13           | IDENTIFIER • ARITHASS expr
   14 funcall: IDENTIFIER • '(' args ')'

    ARITHASS  shift, and go to state 22
    ASSIGNOP  shift, and go to state 23
    '('       shift, and go to state 24


State 5

    0 $accept: program • $end

    $end  shift, and go to state 25


State 6

    1 program: statement • program
    2        | statement •

    IF          shift, and go to state 1
    IMPORT      shift, and go to state 2
    FROM        shift, and go to state 3
    IDENTIFIER  shift, and go to state 4

    $default  reduce using rule 2 (program)

    program     go to state 26
    statement   go to state 6
    cond        go to state 7
    import      go to state 8
    assignment  go to state 9
    funcall     go to state 10


State 7

    6 statement: cond •

    $default  reduce using rule 6 (statement)


State 8

    3 statement: import •

    $default  reduce using rule 3 (statement)


State 9

    4 statement: assignment •

    $default  reduce using rule 4 (statement)


State 10

    5 statement: funcall •

    $default  reduce using rule 5 (statement)


State 11

   14 funcall: IDENTIFIER • '(' args ')'
   19 expr: IDENTIFIER •

    '('  shift, and go to state 24

    $default  reduce using rule 19 (expr)


State 12

   21 expr: INT •

    $default  reduce using rule 21 (expr)


State 13

   22 expr: FLOAT •

    $default  reduce using rule 22 (expr)


State 14

   23 expr: STRING •

    $default  reduce using rule 23 (expr)


State 15

   28 expr: '(' • expr ')'

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    funcall  go to state 17
    list     go to state 18
    expr     go to state 27


State 16

   15 list: '[' • args ']'

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    $default  reduce using rule 18 (args)

    funcall  go to state 17
    list     go to state 18
    args     go to state 28
    expr     go to state 29


State 17

   20 expr: funcall •

    $default  reduce using rule 20 (expr)


State 18

   24 expr: list •

    $default  reduce using rule 24 (expr)


State 19

    7 cond: IF expr • ':' INDENT program DEDENT
   25 expr: expr • ARITHOP expr
   26     | expr • RELOP expr
   27     | expr • LOGICOP expr

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32
    ':'      shift, and go to state 33


State 20

    8 import: IMPORT IDENTIFIER •
    9       | IMPORT IDENTIFIER • AS IDENTIFIER

    AS  shift, and go to state 34

    $default  reduce using rule 8 (import)


State 21

   10 import: FROM IDENTIFIER • IMPORT IDENTIFIER
   11       | FROM IDENTIFIER • IMPORT IDENTIFIER AS IDENTIFIER

    IMPORT  shift, and go to state 35


State 22

   13 assignment: IDENTIFIER ARITHASS • expr

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    funcall  go to state 17
    list     go to state 18
    expr     go to state 36


State 23

   12 assignment: IDENTIFIER ASSIGNOP • expr

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    funcall  go to state 17
    list     go to state 18
    expr     go to state 37


State 24

   14 funcall: IDENTIFIER '(' • args ')'

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    $default  reduce using rule 18 (args)

    funcall  go to state 17
    list     go to state 18
    args     go to state 38
    expr     go to state 29


State 25

    0 $accept: program $end •

    $default  accept


State 26

    1 program: statement program •

    $default  reduce using rule 1 (program)


State 27

   25 expr: expr • ARITHOP expr
   26     | expr • RELOP expr
   27     | expr • LOGICOP expr
   28     | '(' expr • ')'

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32
    ')'      shift, and go to state 39


State 28

   15 list: '[' args • ']'

    ']'  shift, and go to state 40


State 29

   16 args: expr •
   17     | expr • ',' args
   25 expr: expr • ARITHOP expr
   26     | expr • RELOP expr
   27     | expr • LOGICOP expr

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32
    ','      shift, and go to state 41

    $default  reduce using rule 16 (args)


State 30

   27 expr: expr LOGICOP • expr

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    funcall  go to state 17
    list     go to state 18
    expr     go to state 42


State 31

   26 expr: expr RELOP • expr

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    funcall  go to state 17
    list     go to state 18
    expr     go to state 43


State 32

   25 expr: expr ARITHOP • expr

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    funcall  go to state 17
    list     go to state 18
    expr     go to state 44


State 33

    7 cond: IF expr ':' • INDENT program DEDENT

    INDENT  shift, and go to state 45


State 34

    9 import: IMPORT IDENTIFIER AS • IDENTIFIER

    IDENTIFIER  shift, and go to state 46


State 35

   10 import: FROM IDENTIFIER IMPORT • IDENTIFIER
   11       | FROM IDENTIFIER IMPORT • IDENTIFIER AS IDENTIFIER

    IDENTIFIER  shift, and go to state 47


State 36

   13 assignment: IDENTIFIER ARITHASS expr •
   25 expr: expr • ARITHOP expr
   26     | expr • RELOP expr
   27     | expr • LOGICOP expr

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32

    $default  reduce using rule 13 (assignment)


State 37

   12 assignment: IDENTIFIER ASSIGNOP expr •
   25 expr: expr • ARITHOP expr
   26     | expr • RELOP expr
   27     | expr • LOGICOP expr

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32

    $default  reduce using rule 12 (assignment)


State 38

   14 funcall: IDENTIFIER '(' args • ')'

    ')'  shift, and go to state 48


State 39

   28 expr: '(' expr ')' •

    $default  reduce using rule 28 (expr)


State 40

   15 list: '[' args ']' •

    $default  reduce using rule 15 (list)


State 41

   17 args: expr ',' • args

    IDENTIFIER  shift, and go to state 11
    INT         shift, and go to state 12
    FLOAT       shift, and go to state 13
    STRING      shift, and go to state 14
    '('         shift, and go to state 15
    '['         shift, and go to state 16

    $default  reduce using rule 18 (args)

    funcall  go to state 17
    list     go to state 18
    args     go to state 49
    expr     go to state 29


State 42

   25 expr: expr • ARITHOP expr
   26     | expr • RELOP expr
   27     | expr • LOGICOP expr
   27     | expr LOGICOP expr •

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32

    LOGICOP   [reduce using rule 27 (expr)]
    RELOP     [reduce using rule 27 (expr)]
    ARITHOP   [reduce using rule 27 (expr)]
    $default  reduce using rule 27 (expr)

    shift/reduce conflict on token ARITHOP:
       27 expr: expr LOGICOP expr •
       25 expr: expr • ARITHOP expr
      Example: expr LOGICOP expr • ARITHOP expr
      Shift derivation
        expr
        ↳ 27: expr LOGICOP expr
                           ↳ 25: expr • ARITHOP expr
      Reduce derivation
        expr
        ↳ 25: expr                      ARITHOP expr
              ↳ 27: expr LOGICOP expr •

    shift/reduce conflict on token RELOP:
       27 expr: expr LOGICOP expr •
       26 expr: expr • RELOP expr
      Example: expr LOGICOP expr • RELOP expr
      Shift derivation
        expr
        ↳ 27: expr LOGICOP expr
                           ↳ 26: expr • RELOP expr
      Reduce derivation
        expr
        ↳ 26: expr                      RELOP expr
              ↳ 27: expr LOGICOP expr •

    shift/reduce conflict on token LOGICOP:
       27 expr: expr LOGICOP expr •
       27 expr: expr • LOGICOP expr
      Example: expr LOGICOP expr • LOGICOP expr
      Shift derivation
        expr
        ↳ 27: expr LOGICOP expr
                           ↳ 27: expr • LOGICOP expr
      Reduce derivation
        expr
        ↳ 27: expr                      LOGICOP expr
              ↳ 27: expr LOGICOP expr •



State 43

   25 expr: expr • ARITHOP expr
   26     | expr • RELOP expr
   26     | expr RELOP expr •
   27     | expr • LOGICOP expr

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32

    LOGICOP   [reduce using rule 26 (expr)]
    RELOP     [reduce using rule 26 (expr)]
    ARITHOP   [reduce using rule 26 (expr)]
    $default  reduce using rule 26 (expr)

    shift/reduce conflict on token ARITHOP:
       26 expr: expr RELOP expr •
       25 expr: expr • ARITHOP expr
      Example: expr RELOP expr • ARITHOP expr
      Shift derivation
        expr
        ↳ 26: expr RELOP expr
                         ↳ 25: expr • ARITHOP expr
      Reduce derivation
        expr
        ↳ 25: expr                    ARITHOP expr
              ↳ 26: expr RELOP expr •

    shift/reduce conflict on token RELOP:
       26 expr: expr RELOP expr •
       26 expr: expr • RELOP expr
      Example: expr RELOP expr • RELOP expr
      Shift derivation
        expr
        ↳ 26: expr RELOP expr
                         ↳ 26: expr • RELOP expr
      Reduce derivation
        expr
        ↳ 26: expr                    RELOP expr
              ↳ 26: expr RELOP expr •

    shift/reduce conflict on token LOGICOP:
       26 expr: expr RELOP expr •
       27 expr: expr • LOGICOP expr
      Example: expr RELOP expr • LOGICOP expr
      Shift derivation
        expr
        ↳ 26: expr RELOP expr
                         ↳ 27: expr • LOGICOP expr
      Reduce derivation
        expr
        ↳ 27: expr                    LOGICOP expr
              ↳ 26: expr RELOP expr •



State 44

   25 expr: expr • ARITHOP expr
   25     | expr ARITHOP expr •
   26     | expr • RELOP expr
   27     | expr • LOGICOP expr

    LOGICOP  shift, and go to state 30
    RELOP    shift, and go to state 31
    ARITHOP  shift, and go to state 32

    LOGICOP   [reduce using rule 25 (expr)]
    RELOP     [reduce using rule 25 (expr)]
    ARITHOP   [reduce using rule 25 (expr)]
    $default  reduce using rule 25 (expr)

    shift/reduce conflict on token ARITHOP:
       25 expr: expr ARITHOP expr •
       25 expr: expr • ARITHOP expr
      Example: expr ARITHOP expr • ARITHOP expr
      Shift derivation
        expr
        ↳ 25: expr ARITHOP expr
                           ↳ 25: expr • ARITHOP expr
      Reduce derivation
        expr
        ↳ 25: expr                      ARITHOP expr
              ↳ 25: expr ARITHOP expr •

    shift/reduce conflict on token RELOP:
       25 expr: expr ARITHOP expr •
       26 expr: expr • RELOP expr
      Example: expr ARITHOP expr • RELOP expr
      Shift derivation
        expr
        ↳ 25: expr ARITHOP expr
                           ↳ 26: expr • RELOP expr
      Reduce derivation
        expr
        ↳ 26: expr                      RELOP expr
              ↳ 25: expr ARITHOP expr •

    shift/reduce conflict on token LOGICOP:
       25 expr: expr ARITHOP expr •
       27 expr: expr • LOGICOP expr
      Example: expr ARITHOP expr • LOGICOP expr
      Shift derivation
        expr
        ↳ 25: expr ARITHOP expr
                           ↳ 27: expr • LOGICOP expr
      Reduce derivation
        expr
        ↳ 27: expr                      LOGICOP expr
              ↳ 25: expr ARITHOP expr •



State 45

    7 cond: IF expr ':' INDENT • program DEDENT

    IF          shift, and go to state 1
    IMPORT      shift, and go to state 2
    FROM        shift, and go to state 3
    IDENTIFIER  shift, and go to state 4

    program     go to state 50
    statement   go to state 6
    cond        go to state 7
    import      go to state 8
    assignment  go to state 9
    funcall     go to state 10


State 46

    9 import: IMPORT IDENTIFIER AS IDENTIFIER •

    $default  reduce using rule 9 (import)


State 47

   10 import: FROM IDENTIFIER IMPORT IDENTIFIER •
   11       | FROM IDENTIFIER IMPORT IDENTIFIER • AS IDENTIFIER

    AS  shift, and go to state 51

    $default  reduce using rule 10 (import)


State 48

   14 funcall: IDENTIFIER '(' args ')' •

    $default  reduce using rule 14 (funcall)


State 49

   17 args: expr ',' args •

    $default  reduce using rule 17 (args)


State 50

    7 cond: IF expr ':' INDENT program • DEDENT

    DEDENT  shift, and go to state 52


State 51

   11 import: FROM IDENTIFIER IMPORT IDENTIFIER AS • IDENTIFIER

    IDENTIFIER  shift, and go to state 53


State 52

    7 cond: IF expr ':' INDENT program DEDENT •

    $default  reduce using rule 7 (cond)


State 53

   11 import: FROM IDENTIFIER IMPORT IDENTIFIER AS IDENTIFIER •

    $default  reduce using rule 11 (import)
